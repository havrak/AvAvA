/**
 * User API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Body from '../model/Body';
import Body1 from '../model/Body1';
import Body2 from '../model/Body2';
import Container from '../model/Container';
import ContainerInfo from '../model/ContainerInfo';
import ContainerState from '../model/ContainerState';
import CreateContainerData from '../model/CreateContainerData';
import InlineResponse200 from '../model/InlineResponse200';
import OperationState from '../model/OperationState';
import Project from '../model/Project';
import ProjectInfo from '../model/ProjectInfo';
import ProjectState from '../model/ProjectState';
import Snapshot from '../model/Snapshot';
import User from '../model/User';
import UserData from '../model/UserData';
import UserProjects from '../model/UserProjects';
import UserProjectsInfo from '../model/UserProjectsInfo';
import UserProjectsState from '../model/UserProjectsState';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the combinedDataGet operation.
     * @callback module:api/DefaultApi~combinedDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This request will be fired after authentication in order to get all the data needed in the frontend
     * @param {module:api/DefaultApi~combinedDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserData}
     */
    combinedDataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserData;

      return this.apiClient.callApi(
        '/combinedData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesCreateConfigDataGet operation.
     * @callback module:api/DefaultApi~instancesCreateConfigDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContainerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesCreateConfigDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContainerData}
     */
    instancesCreateConfigDataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateContainerData;

      return this.apiClient.callApi(
        '/instances/createConfigData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdConsoleGet operation.
     * @callback module:api/DefaultApi~instancesIdConsoleGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdConsoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    instancesIdConsoleGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/instances/{id}/console', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdExportGet operation.
     * @callback module:api/DefaultApi~instancesIdExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    instancesIdExportGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/instances/{id}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdFreezePatch operation.
     * @callback module:api/DefaultApi~instancesIdFreezePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdFreezePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesIdFreezePatch(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances/{id}/freeze', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdGet operation.
     * @callback module:api/DefaultApi~instancesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    instancesIdGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Container;

      return this.apiClient.callApi(
        '/instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdInfoGet operation.
     * @callback module:api/DefaultApi~instancesIdInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerInfo}
     */
    instancesIdInfoGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerInfo;

      return this.apiClient.callApi(
        '/instances/{id}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdRestoreSnapshotIdPatch operation.
     * @callback module:api/DefaultApi~instancesIdRestoreSnapshotIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdRestoreSnapshotIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesIdRestoreSnapshotIdPatch(id, snapshotId, callback) {
      let postBody = null;

      let pathParams = {
        'id': id,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances/{id}/restore/{snapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdSnapshotsGet operation.
     * @callback module:api/DefaultApi~instancesIdSnapshotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retreives the list of all snapshots for given container
     * @param {module:api/DefaultApi~instancesIdSnapshotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snapshot>}
     */
    instancesIdSnapshotsGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Snapshot];

      return this.apiClient.callApi(
        '/instances/{id}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdSnapshotsPost operation.
     * @callback module:api/DefaultApi~instancesIdSnapshotsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/DefaultApi~instancesIdSnapshotsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instancesIdSnapshotsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'snapshotName': opts['snapshotName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/instances/{id}/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdStartPatch operation.
     * @callback module:api/DefaultApi~instancesIdStartPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdStartPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesIdStartPatch(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances/{id}/start', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdStateGet operation.
     * @callback module:api/DefaultApi~instancesIdStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerState}
     */
    instancesIdStateGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerState;

      return this.apiClient.callApi(
        '/instances/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdStopPatch operation.
     * @callback module:api/DefaultApi~instancesIdStopPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdStopPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesIdStopPatch(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances/{id}/stop', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesIdUnfreezePatch operation.
     * @callback module:api/DefaultApi~instancesIdUnfreezePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesIdUnfreezePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesIdUnfreezePatch(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances/{id}/unfreeze', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesImportPut operation.
     * @callback module:api/DefaultApi~instancesImportPutCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~instancesImportPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    instancesImportPut(containerFile, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/instances/import', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesMoveToDifferentProjectPatch operation.
     * @callback module:api/DefaultApi~instancesMoveToDifferentProjectPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move instances to another project TODO
     * @param {module:api/DefaultApi~instancesMoveToDifferentProjectPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instancesMoveToDifferentProjectPatch(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/instances/moveToDifferentProject', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the instancesPost operation.
     * @callback module:api/DefaultApi~instancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance
     * @param {module:api/DefaultApi~instancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationState}
     */
    instancesPost(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationState;

      return this.apiClient.callApi(
        '/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the projectCreateConfigDataGet operation.
     * @callback module:api/DefaultApi~projectCreateConfigDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~projectCreateConfigDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    projectCreateConfigDataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/project/createConfigData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the projectIdGet operation.
     * @callback module:api/DefaultApi~projectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~projectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectIdGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;

      return this.apiClient.callApi(
        '/project/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the projectIdInfoGet operation.
     * @callback module:api/DefaultApi~projectIdInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~projectIdInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectInfo}
     */
    projectIdInfoGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectInfo;

      return this.apiClient.callApi(
        '/project/{id}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the projectIdStateGet operation.
     * @callback module:api/DefaultApi~projectIdStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~projectIdStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectState}
     */
    projectIdStateGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectState;

      return this.apiClient.callApi(
        '/project/{id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the projectPost operation.
     * @callback module:api/DefaultApi~projectPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project
     * @param {module:api/DefaultApi~projectPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectPost(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/DefaultApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userProjectsGet operation.
     * @callback module:api/DefaultApi~userProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~userProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjects}
     */
    userProjectsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProjects;

      return this.apiClient.callApi(
        '/user/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userProjectsInfoGet operation.
     * @callback module:api/DefaultApi~userProjectsInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~userProjectsInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectsInfo}
     */
    userProjectsInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProjectsInfo;

      return this.apiClient.callApi(
        '/user/projects/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userProjectsStateGet operation.
     * @callback module:api/DefaultApi~userProjectsStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectsState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~userProjectsStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectsState}
     */
    userProjectsStateGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProjectsState;

      return this.apiClient.callApi(
        '/user/projects/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
