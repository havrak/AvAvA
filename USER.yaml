openapi: "3.0.2"
info:
   title: User API
   version: "1.0"
servers:
   - url: https://localhost:3000/api
paths:
   /combinedData:
      get:
         description: This request will be fired after authentication in order to get all the data needed in the frontend
         responses:
            "200":
               description: Everything needed for the frontend to work in one request
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/UserData"
   #  /stateDetailed: #nebo /instances#get ??

   /instances:
      post:
         description: Create a new instance
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        projectId:
                           type: integer
                           description: Id of project where container should be created
                        autostart:
                           type: boolean
                        templateId:
                           type: integer
                        stateful:
                           type: boolean
                        applicationToInstall: #TODO
                           type: array
                           items:
                            $ref: "#/components/schemas/ApplicationToInstall"
                        connectToInternet:
                          type: boolean
                        customLimits:
                           $ref: "#/components/schemas/Limits"
                     required:
                        - name
                        - autostart
                        - persistent
                        - configurationType
                        - applicationToInstall
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Container"
            "500":
               description: Internal server error - e.g. not enough resources
   /instances/{id}:
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be querried
         responses:
            "200":
               description: Successful state info return
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Container"
      delete:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be deleted
         responses:
            "200":
               description: deleted the container
   /instances/{id}/stateWithHistory: 
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container which state is requested
         responses:
            "200":
               description: Successful state info return
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/ContainerStateWithHistory"
   /instances/{id}/console: #TODO
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container for which we start the console
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        type: integer
                        description: TODO
   #/instances/{id}/files: TODO
   #  get:
   #    parameters:
   #      - in: path
   #        required: true
   #        name: id
   #        schema:
   #          type: integer
   #        description: Id kontejneru, ke kterému vztahujeme naši operaci
   #    responses:
   #      '200':
   #        description: OK
   /instances/{id}/snapshots:
      get:
         description: Retreives the list of all snapshots for given container
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be snapshotted
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           $ref: "#/components/schemas/Snapshot"
      post:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be snapshotted
            - in: query
              required: false
              name: snapshotName
              schema:
                 type: string
              description: Name of the snapshot to be created
            - in: query
              required: true
              name: stateful
              schema:
                 type: boolean
              description: Name of the snapshot to be created
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Snapshot"
   /instances/{containerId}/snapshots/{snapshotId}:
      delete:
         parameters:
            - in: path
              required: true
              name: containerId
              schema:
                 type: integer
              description: ID of the container where the snapshot is
            - in: path
              required: true
              name: snapshotId
              schema:
                 type: integer
              description: ID of the snapshot to be deleted
         responses:
            "200":
               description: OK
   /instances/{id}/restore/{snapshotId}:
      patch:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be reverted
            - in: path
              required: true
              name: snapshotId
              schema:
                 type: integer
              description: ID of the snapshot to be used for updating the container files
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/OperationState"
   /instances/{id}/export:
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the downloaded container
         responses:
            "200":
               description: Running
               content:
                  application/json:
                     schema:
                        type: string
                        description: Stream souboru
   /instances/import:
      put:
         parameters:
            - in: cookie
              required: true
              name: containerFile
              schema:
                 type: string
                 format: binary
              description: The container file to be uploaded
         responses:
            "200":
               description: File is uploading
               content:
                  application/json:
                     schema:
                        type: integer
                        description: ID to the process
   /instances/{id}/start:
      patch:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the used container
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/OperationState"
   /instances/{id}/stop:
      patch:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be stopped
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/OperationState"
   /instances/{id}/freeze:
      patch:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be frozen
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/OperationState"
   /instances/{id}/unfreeze:
      patch:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the container to be unfrozen
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/OperationState"
   /projects:
      get:
         responses:
            "200":
               description: All projects of current user
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/UserProjects"
      post:
         description: Create a new project
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        customLimits:
                           $ref: "#/components/schemas/Limits"
                     required:
                        - name
                        - customLimits
         responses:
            "200":
               description: Successfully created
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           $ref: "#/components/schemas/Project"
   /projects/createConfigData:
      get:
         responses:
            "200":
               description: Returns all data that are necesarry to create a project
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           maxLimits:
                              $ref: "#/components/schemas/Limits"
   /projects/stateWithHistory:
      get:
         responses:
            "200":
               description: History of states of all projects of this user
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/UserStateWithHistory"
   /projects/{projectId}/createInstanceConfigData:
      get:
         parameters:
            - in: path
              required: true
              name: projectId
              schema:
                 type: integer
              description: ID of the project to be querried
         responses:
            "200":
               description: Returns all data that are necesarry to create an instance in this project
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           templateTypes:
                              type: array
                              items:
                                 $ref: "#/components/schemas/Template"
                           applicationsToInstall:
                              type: array
                              items:
                                 $ref: "#/components/schemas/ApplicationToInstall"
                           maxLimits:
                              $ref: "#/components/schemas/Limits"
   /projects/{id}:
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the project to be querried
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/Project"
      delete:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the project to be deleted
         responses:
            "200":
               description: deleted the container
   /projects/{id}/stateWithHistory:
      get:
         parameters:
            - in: path
              required: true
              name: id
              schema:
                 type: integer
              description: ID of the project to be querried
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/ProjectStateWithHistory"
   /user:
      get:
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/User"
components:
   schemas:
      Image:
         type: object
         properties:
            os:
               type: string
            vesrion:
               type: string
            description:
               type: string
      Template:
         type: object
         description: Combination of image and configuration. User can then create instances of these templates
         properties:
            id:
               type: integer
               description: Id of a template generatd by database
            name:
               type: string
            createdOn:
               type: string
            image:
               $ref: "#/components/schemas/Image"
            description:
               type: string
            minDiskUsage:
               type: integer
               description: minimum disk space needed for the container to work.
      Limits:
         type: object
         description: Resources allocated to container/project/user.
         properties:
            RAM:
               type: integer
               description: in bytes
            CPU:
               type: integer
               description: in Hz
            disk:
               type: integer
               description: in bytes
            internet:
              type: object
              properties:
                upload:
                   type: integer
                   description: in bits/s
                download:
                   type: integer
                   description: in bits/s
      ContainerResourceState:
         type: object
         description: Object representing current state of the container (not history). Each object also contains limit information that were in effect in the time of measuring the state.
         properties:
            measuredOn:
               type: string
               description: Date and time when this state was measured
            limits:
              type: object
              properties:
                RAM:
                  type: integer
                  description: in bytes
                CPU:
                  type: integer
                  description: in Hz
                disk:
                  type: integer
                  description: in bytes
            CPU:
               type: object
               properties:
                  usedTime:
                     type: integer
                     description: Time used by the CPU in nanoseconds from the container start
                  usedPercent:
                     type: integer
                     description: Percentage of CPU consumed from the CPU available to the container
            RAM:
               type: object
               properties:
                  usage:
                     type: integer
                     description: last measured RAM usage in Bytes
                  usagePeak:
                     type: integer
                     description: maximum measured RAM usage in Bytes from the start of the container
                  usedPercent:
                     type: integer
                     description: Percentage of RAM consumed from the RAM available to the container
            disk:
               type: array
               items:
                  type: object
                  properties:
                     name:
                        type: string
                        description: Name of the device (disk) e.g. root
                     usage:
                        type: integer
                        description: current disk usage in bytes
                     usedPercent:
                        type: integer
                        description: Percentage of the consumed disk memory from the memory available to the container
            internet:
               $ref: "#/components/schemas/NetworkState"
            networks:
               type: array
               items:
                $ref: "#/components/schemas/NetworkState"
            numberOfProcesses:
               type: integer
               description: Process count
            OperationState:
               $ref: "#/components/schemas/OperationState"
      NetworkState:
        type: object
        properties:
          name:
            type: string
            description: name of the network
          limits:
            type: object
            properties:
              upload:
                 type: integer
                 description: in bits/s
              download:
                 type: integer
                 description: in bits/s
          adresses:
              type: array
              items:
                 type: object
                 properties:
                    family:
                       type: string
                    adress:
                       type: string
                    netmask:
                       type: integer
                    scope:
                       type: string
          counters:
              type: object
              properties:
                 usedDownloadSpeed:
                    type: integer
                    description: number of bytes that were downloaded/1s in bits/s
                 usedUploadSpeed:
                    type: integer
                    description: number of bytes that were uploaded/1s in bits/s
          hwaddr:
              type: string
          hostName:
              type: string
          mtu:
              type: integer
          state:
              type: string
          type:
              type: string
      Snapshot:
         type: object
         properties:
            name:
               type: string
               description: Name of the snapshot
            createdOn:
               type: string
               description: The time of creation
            stateful:
               type: boolean
               description: True if state of the container should be maintained
      OperationState:
         type: object
         properties:
            status:
               type: string
            statusCode:
               type: integer
      ContainerStateWithHistory:
         type: object
         description: LXD container state containing current state and also the history of states
         properties:
            id:
              type: integer
              description: id of the container
            stateHistory:
              type: array
              description: history of states - index 0 = current state, index 1 = pre-last state, n-1 = last remembered state.
              items:
                $ref: "#/components/schemas/ContainerResourceState"
      Container:
         type: object
         description: LXD container with info and state
         properties:
            id:
               type: number
            name:
               type: string
            url:
               type: string
            template:
               $ref: "#/components/schemas/Template"
            ipv4:
               type: string
            ipv6:
               type: string
            stateful:
               type: boolean
            createdOn:
               type: string
               description: Date and time of the creation of the container
            lastStartedOn:
               type: string
               description: Date and time when container was last started
            snapshots:
               type: array
               items:
                  $ref: "#/components/schemas/Snapshot"
            state:
               $ref: "#/components/schemas/ContainerResourceState"
      ApplicationToInstall:
         type: object
         properties:
            id:
               type: integer
               description: Id of application
            name:
               type: string
               description: Application name
            description:
               type: string
               description: Description of the application
            icon:
               type: string
               description: href to icon of the application - optional
      ProjectStateWithHistory:
         type: object
         description: Object that knows state and history of project and all containers in it
         properties:
            id:
               type: integer
               description: id of the project
            containerStatesHistory:
               description: First state is the current state, after that there are logs of containers's state that were part of this project. Even if the container has already been deleted, it is present in this log.
               type: array
               items:
                  $ref: "#/components/schemas/ContainerStateWithHistory"
      Project:
         type: object
         properties:
            id:
               type: integer
               description: id of the project generated by the database
            name:
               type: string
               description: Name of the project
            owner:
               $ref: "#/components/schemas/User"
            createdOn:
               type: string
               description: Date and time when the project has been created in Javascript Date format
            coworkers:
               type: array
               items:
                  $ref: "#/components/schemas/User"
            containers:
               type: array
               items:
                  $ref: "#/components/schemas/Container"
         example:
            id: 14
            name: Moodle
            owner:
               id: 1
               email: vladimir.vavra@student.gyarab.cz
               familyName: Vávra
               givenName: Vladimír
               role: 0
               icon: https://lh3.googleusercontent.com/a-/AOh14Gihydkn4TuY5bLkYUe4nHcOFf7FPWKDKmxG1WPpHA=s96-c
               coins: 154
            createdOn: Wed Mar 10 2021 20:36:50 GMT+0100 (Central European Standard Time)
            coworkers:
               - id: 2
                 email: krystof.havranek@student.gyarab.cz
                 familyName: Kryštof
                 givenName: Havránek
                 role: 0
                 icon: https://lh3.googleusercontent.com/a-/AOh14Gihydkn4TuY5bLkYUe4nHcOFf7FPWKDKmxG1WPpHA=s96-c
                 coins: 12
      UserStateWithHistory:
         type: object
         description: Object that knows state and history of all projects and all containers in them
         properties:
            projectStatesHistory:
               type: array
               description: First state is the current state, after that there are logs of projects's state that were belonged to this user. Even if the container has already been deleted, it is present in this log.
               items:
                  $ref: "#/components/schemas/ProjectStateWithHistory"
      UserProjects:
         type: object
         description: object containing all the data about projects that this user participates in. This includes all of his projects and all project where user is only a participant.
         properties:
            projects:
               type: array
               items:
                  $ref: "#/components/schemas/Project"
      User:
         type: object
         properties:
            id:
               type: integer
               description: Id of the user generated by database
            email:
               type: string
            familyName:
               type: string
               description: inherited family name
            givenName:
               type: string
               description: first name - given by parents
            role:
               type: integer
               description: 0 = normal user, 1 = admin, 2 = superadmin
            icon:
               type: string
               description: icon of user
            coins:
               type: integer
               description: number of coins that can be used to buy bigger resource quotas
         example:
            id: 1
            email: vladimir.vavra@student.gyarab.cz
            familyName: Vávra
            givenName: Vladimír
            role: 0
            icon: https://lh3.googleusercontent.com/a-/AOh14Gihydkn4TuY5bLkYUe4nHcOFf7FPWKDKmxG1WPpHA=s96-c
            coins: 154
      UserData:
         type: object
         description: Object containing everything that is necessary for the user frontend to work
         properties:
            user:
               $ref: "#/components/schemas/User"
            userProjects:
               $ref: "#/components/schemas/UserProjects"