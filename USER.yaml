openapi: '3.0.2'
info:
  title: User API
  version: '1.0'
servers:
  - url: https://localhost:3000/api
paths:
  /combinedData:
    get:
      description: This request will be fired after authentication in order to get all the data needed in the frontend
      responses:
        '200':
          description: Everything needed for the frontend to work in one request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
#  /stateDetailed: #nebo /instances#get ??
  
  /instances:
    post:
      description: Create a new instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                autostart:
                  type: boolean
                templateId:
                  type: integer
                applicationToInstall:
                  type: array
                  items:
                    description: Application name
                    type: string
                customLimits:
                  $ref: '#/components/schemas/Limits'
              required:
                - name
                - autostart
                - persistent
                - configurationType
                - applicationToInstall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/createConfigData:
    get:
      responses:
        '200':
          description: Returns all data that are necesarry to create a container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContainerData'
  /instances/{id}:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be querried
      responses:
        '200':
          description: Successful state info return
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
  /instances/{id}/info:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be querried
      responses:
        '200':
          description: Successful state info return
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInfo'
  /instances/{id}/state: #nebo /info
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container which state is requested
      responses:
        '200':
          description: Successful state info return
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerState'
  /instances/{id}/console: #TODO
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container for which we start the console
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: TODO
  #/instances/{id}/files: TODO
  #  get:
  #    parameters:
  #      - in: path
  #        required: true
  #        name: id
  #        schema:
  #          type: integer
  #        description: Id kontejneru, ke kterému vztahujeme naši operaci
  #    responses:
  #      '200':
  #        description: OK
  /instances/{id}/snapshots:
    get: 
      description: Retreives the list of all snapshots for given container
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be snapshotted
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
    post:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be snapshotted
        - in: query
          required: false
          name: snapshotName
          schema:
            type: string
          description: Name of the snapshot to be created
      responses:
         '200':
          description: OK
  /instances/{id}/restore/{snapshotId}:
    patch:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be reverted
        - in: path
          required: true
          name: snapshotId
          schema:
            type: integer
          description: ID of the snapshot to be used for updating the container files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/{id}/export:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the downloaded container
      responses:
        '200':
          description: Running
          content:
            application/json:
              schema:
                type: integer
                description: ID to the process
  /instances/import:
    put:
      parameters:
        - in: cookie
          required: true
          name: containerFile
          schema:
             type: string
             format: binary
          description: The container file to be uploaded
      responses:
         '200':
            description: File is uploading
            content:
               application/json:
                  schema:
                     type: integer
                     description: ID to the process
  /instances/{id}/start:
    patch:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the used container
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/{id}/stop:
    patch:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be stopped
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/{id}/freeze:
    patch:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be frozen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/{id}/unfreeze:
    patch:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the container to be unfrozen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationState'
  /instances/moveToDifferentProject: 
    patch:
      description: Move instances to another project TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceProjectId:
                  type: string
                destProjectId:
                  type: string
                containers:
                  type: array
                  items:
                    type: integer
                    description: container ids
              required:
                - name
                - customLimits
      responses:
        '200':
          description: OK
  /project:
    post:
      description: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                customLimits:
                  $ref: '#/components/schemas/Limits'
              required:
                - name
                - customLimits
      responses:
        '200':
          description: OK
  /project/createConfigData:
    get:
      responses:
        '200':
          description: Returns all data that are necesarry to create a project
          content:
            application/json:
              schema:
                type: object
                properties:
                  upperLimitBoundaries:
                    $ref: '#/components/schemas/Limits'
                  defaultLimits:
                    $ref: '#/components/schemas/Limits'
  /project/{id}:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the project to be querried
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /project/{id}/info:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the project to be querried
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
  /project/{id}/state:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the project to be querried
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectState'
  /user/projects:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjects'
  /user/projects/info:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectsInfo'
  /user/projects/state:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectsState'
  /user:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    Image: 
      type: object
      properties:
        os:
          type: string
        vesrion: 
          type: string
        description:
          type: string
    Template:
      type: object
      description: Combination of image and configuration. User can then create instances of these templates
      properties:
        id:
          type: integer
          description: Id of a template generatd by database
        name:
          type: string
        timestamp:
          type: string
        image:
          $ref: '#/components/schemas/Image'
        description:
          type: string
    Limits:
      type: object
      description: Resources quotas assigned to container/project/user. 
      properties:
        RAM:
          type: integer
          description: in bytes
        CPU:
          type: integer
          description: in percent
        disk:
          type: integer
          description: in bytes
        network:
          type: object
          properties:
            upload:
              type: integer
              description: in bytes/s
            download:
              type: integer
              description: in bytes/s
    ResourceState:
      type: array
      description: Usage of resources assigned to container in time arrayIndex * 10 minutes (0 = last measurment)
      items: 
        type: object
        properties:
          status:
            type: string
          statusCode:
            type: integer
          limits:
            $ref: '#/components/schemas/Limits'
          CPU:
            type: object
            properties:
              consumedTime:
                type: integer
                description: Time used by the CPU in nanoseconds
              percentConsumed:
                type: integer
                description: Percentage of CPU allocated from the overall CPU available
          RAM:
            type: object
            properties:
              usage:
                type: integer
                description: last measured RAM usage in Bytes
              usagePeak:
                type: integer
                description: maximum measured RAM usage in Bytes
              percentConsumed:
                type: integer
                description: Percentage of RAM allocated from the overall RAM available
          disk:
            type: object
            properties:
              currentlyConsumedMemory:
                type: integer
                description: current disk usage in bytes
              percentConsumed:
                type: integer
                description: Percentage of the allocated disk memory from the overall memory available
          networks:
            type: array
            items:
              type: object
              properties:
                networkName:
                  type: string
                adresses:
                  type: array
                  items:
                    type: object
                    properties: 
                      family:
                        type: string
                      adress:
                        type: string
                      netmask: 
                        type: integer
                      scope:
                        type: string
                counters:
                  type: object
                  properties:
                    bytesReceived:
                      type: integer
                    bytesSent:
                      type: integer
                    packetsReceived: 
                      type: integer
                    packetsSent:
                      type: integer
                hwaddr:
                  type: string
                hostName:
                  type: string
                mtu: 
                  type: integer
                state:
                  type: string
                type:
                  type: string
          numberOfProcesses:
            type: integer
            description: Process count
    Snapshot:
      type: object
      properties:
        id:
          type: integer
          description: ID of the snapshot
        name:
          type: string
          description: Name of the snapshot
        timestamp:
          type: integer
          description: The time of creation
        stateful:
          type: boolean
          description: True if state of the container should be maintained
    OperationState:
      type: object
      properties: 
        status:
          type: string
        statusCode:
          type: integer
    ContainerInfo:
      type: object
      description: LXD container info
      properties:
        id:
          type: number
        name:
          type: string
        template: 
          $ref: '#/components/schemas/Template'
        ipv4:
          type: string
        ipv6:
          type: string
        createdOn:
          type: string
          description: Date and time of the creation of the container
        lastStartedOn:
          type: string
          description: Date and time when container was last started
        stateful:
          type: boolean
          description: true if container should store its state on stop and restore it on start
        statusCode:
          type: integer
        maxResources:
          $ref: '#/components/schemas/Limits'
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/Snapshot'
    ContainerState:
      type: object
      description: LXD container state
      properties:
        id:
          type: integer
          description: id of the container
        maxResources:
          $ref: '#/components/schemas/Limits'
        state:
          $ref: '#/components/schemas/ResourceState'
    Container:
      type: object
      description: LXD container with info and state
      properties:
        id:
          type: number
        name:
          type: string
        template: 
          $ref: '#/components/schemas/Template'
        ipv4:
          type: string
        ipv6:
          type: string
        createdOn:
          type: string
          description: Date and time of the creation of the container
        lastStartedOn:
          type: string
          description: Date and time when container was last started
        statusCode:
          type: integer
        maxResources:
          $ref: '#/components/schemas/Limits'
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/Snapshot'
        state:
          $ref: '#/components/schemas/ResourceState'
    CreateContainerData:
      type: object
      description: All the data necessary to create a container (except for projects and resources - this has to be achieved via different ways)
      properties:
        templateTypes:
          type: array
          items:
            $ref: '#/components/schemas/Template'
        applicationsToInstall:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationToInstall'
    ApplicationToInstall:
      type: object
      properties:
        name:
          type: string
          description: Application name
        description: 
          type: string
          description: Description of the application
        icon:
          type: string
          description: href to icon of the application - optional
    ProjectInfo:
      type: object
      properties:
        id:
          type: integer
          description: id of the project
        owner:
          $ref: '#/components/schemas/User'
        coworkers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        maxResources: 
          $ref: '#/components/schemas/Limits'
        containersInfo:
          type: array
          items:
            $ref: '#/components/schemas/ContainerInfo'
    ProjectState:
      type: object
      properties:
        id:
          type: integer
          description: id of the project
        maxResources:
          $ref: '#/components/schemas/Limits'
        containersState:
          type: array
          items:
            $ref: '#/components/schemas/ContainerState'
    Project:
      type: object
      properties:
        id:
          type: integer
          description: id of the project
        owner:
          $ref: '#/components/schemas/User'
        coworkers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        maxResources: 
          $ref: '#/components/schemas/Limits'
        containers:
          type: array
          items:
            $ref: '#/components/schemas/Container'
    UserProjectsInfo:
      type: object
      properties:
        maxResources:
          $ref: '#/components/schemas/Limits'
        projectsInfo:
          type: array
          items:
            $ref: '#/components/schemas/ProjectInfo'
    UserProjectsState:
      type: object
      properties:
        maxResources:
          $ref: '#/components/schemas/Limits'
        projectsState:
          type: array
          items:
            $ref: '#/components/schemas/ProjectState'
    UserProjects:
      type: object
      description: object containing all the data about projects that this user participates in. This includes all of his projects and all project where user is only a participant. 
      properties:
        maxResources:
          $ref: '#/components/schemas/Limits'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    User:
      type: object
      properties:
        id: 
          type: integer
          description: Id of the user generated by database
        email:
          type: string
        familyName:
          type: string
          description: inherited family name
        givenName:
          type: string
          description: first name - given by parents
        profileImage:
          type: string
          description: link to to source of profile image
        role:
          type: integer
          description: 0 = normal user, 1 = admin, 2 = superadmin
        coins:
          type: integer
          description: number of coins that can be used to buy bigger resource quotas
    UserData:
      type: object
      description: Object containing everything that is necessary for the user frontend to work
      properties:
        user:
          $ref: '#/components/schemas/User'
        userProjects:
          $ref: '#/components/schemas/UserProjects'
        createContainerData:
          $ref: '#/components/schemas/CreateContainerData'
          